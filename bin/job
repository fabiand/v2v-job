#!/bin/bash

set -e

[[ "$DEBUG" ]] && set -x

echo "$@"

DSTD=${1:-/v2v-dst}
SRCTYPE=${2}
SRC=${3}
SRCURI=${4}
SRCPASS=$(echo $SOURCE_PASSWORD)
SRCOS=${5:-"Linux"}

BASEDIR=$(readlink -f $(dirname $(readlink -f $0))/..)

die() { echo $@ >&2 ; exit 1 ; }

main() {
  [[ "$DSTD" ]] || die "No destination given"
  [[ "$SRCTYPE" ]] || die "No source type given"
  [[ "$SRC" ]] || die "No source given"

  if [[ "$SRC" = "example" ]]; then
    curl -LO https://download.fedoraproject.org/pub/fedora/linux/releases/27/CloudImages/x86_64/images/Fedora-Cloud-Base-27-1.6.x86_64.raw.xz
    xz -d Fedora-Cloud-Base-27-1.6.x86_64.raw.xz
    SRC=Fedora-Cloud-Base-27-1.6.x86_64.raw
  fi
  if [[ "$SRC" =~ ^http ]]; then
    curl -LO "$SRC"
    SRC=$(basename "$SRC")
  fi

  [[ "$SRCTYPE" = "disk" ]] && SRC="$(readlink -f $SRC)"
  [[ "$SRCTYPE" = "libvirt" && -z "$SRCURI" ]] && die "Please provide valid uri"
  [[ "$SRCTYPE" = "libvirt" && "$SRC" =~ ^vpx && -z "$SRCPASS" ]] && die "Please provide password"

  transformVM "$SRCTYPE" "$SRC" "$SRCURI" "$SRCPASS" "$SRCOS"
}

transformVM() {
  local SRCTYPE=$1
  local SRC="$2"
  local SRCURI="$3"
  local SRCPASS="$4"
  local WD="$(basename $SRC).d"
  local SRCOS = "$5"

  echo "  Converting source: $SRC"
  mkdir -p $WD

  ls -shal $WD

  local NAME=$(basename $SRC | sed "s/[^a-zA-Z0-9-]/-/g" | tr "[:upper:]" "[:lower:]")

  #
  # generate disk and domxml
  [[ "$SRCURI" ]] && SRCURI="-ic $SRCURI"
  if [[ "SRCPASS" ]] ; then
    echo $SRCPASS > pass
    SRCPASS="--password-file pass"
  fi
  if [[ "$DEBUG" ]] ; then
    DEBUG_OPTS="-v -x"
  fi
  virt-v2v $DEBUG_OPTS -i "$SRCTYPE" $SRCPASS $SRCURI "$SRC" -o local -on $NAME -oa sparse -of raw -os $DSTD --machine-readable
  if [[ "SRCPASS" ]] ; then
    rm -f pass
  fi

  local DOMXML=$(ls $DSTD/*.xml)
  local VMYAML=${DOMXML%.xml}.yaml

  # we support only one disk, it needs to be aligned with DNS-1123
  PVCNAME=$(echo $SRC-disk-1 | sed -r 's/[_.]+/-/g')
  VMNAME=$(echo $SRC | sed -r 's/[_.]+/-/g')

  # get resources from vm xml
  CORES=$(xmllint --xpath "/domain/vcpu/text()" $DOMXML)
  MEMORY=$(xmllint --xpath "/domain/memory/text()" $DOMXML)
  UNIT=$(xmllint --xpath "string(/domain/memory/@unit)" $DOMXML)
  BUS=$(xmllint --xpath "string(/domain/devices/disk/target/@bus)" $DOMXML)

  # Create job offlinevirtualmachine
  if [[ "$SRCOS" = "Linux" ]]; then
tee $VMYAML <<EOY
apiVersion: kubevirt.io/v1alpha1
kind: OfflineVirtualMachine
metadata:
  labels:
    kubevirt.io/os: rhel7.4
  name: $VMNAME
spec:
  template:
    terminationGracePeriodSeconds: 0
    domain:
      cpu:
        cores: $CORES
      resources:
        requests:
          memory: $MEMORY$UNIT
      devices:
        disks:
        - name: disk-1
          disk:
            bus: $BUS
          volumeName: volume-1
    volumes:
      - name: volume-1
        persistentVolumeClaim:
          name: $PVCNAME
EOY
  else
tee $VMYAML <<EOY
apiVersion: kubevirt.io/v1alpha1
kind: VirtualMachinePreset
metadata:
  name: windows-server-2016
  selector:
    matchLabels:
      kubevirt.io/os: win2k16
spec:
  domain:
    cpu:
      cores: $CORES
    resources:
      requests:
        memory: $MEMORY$UNIT
    features:
      acpi: {}
      apic: {}
      hyperv:
        relaxed: {}
        vapic: {}
        spinlocks:
          spinlocks: 8191
    clock:
      utc: {}
      timer:
        hpet:
          present: false
        pit:
          tickPolicy: delay
        rtc:
          tickPolicy: catchup
        hyperv: {}
---
apiVersion: kubevirt.io/v1alpha1
kind: OfflineVirtualMachine
metadata:
  labels:
    kubevirt.io/os: win2k16
  name: $VMNAME
spec:
  template:
    terminationGracePeriodSeconds: 0
    domain:
      devices:
        disks:
        - name: disk-1
          disk:
            bus: $BUS
          volumeName: volume-1
    volumes:
      - name: volume-1
        persistentVolumeClaim:
          name: $PVCNAME
EOY
  fi

  # Create the VM
  oc create -f $VMYAML
}

main
