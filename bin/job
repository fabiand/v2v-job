#!/bin/bash

set -e

[[ "$DEBUG" ]] && set -x

echo "$@"

DSTD=${1:-/v2v-dst}
SRCTYPE=${2}
SRC=${3}
LIBVIRTSRCURI=${4}

BASEDIR=$(readlink -f $(dirname $(readlink -f $0))/..)

die() { echo $@ >&2 ; exit 1 ; }

main() {
  [[ "$DSTD" ]] || die "No destination given"
  [[ "$SRCTYPE" ]] || die "No source type given"
  [[ "$SRC" ]] || die "No source given"

  if [[ "$SRC" = "example" ]]; then
    curl -LO https://download.fedoraproject.org/pub/fedora/linux/releases/27/CloudImages/x86_64/images/Fedora-Cloud-Base-27-1.6.x86_64.raw.xz
    xz -d Fedora-Cloud-Base-27-1.6.x86_64.raw.xz
    SRC=Fedora-Cloud-Base-27-1.6.x86_64.raw
  fi
  if [[ "$SRC" =~ ^http ]]; then
    curl -LO "$SRC"
    SRC=$(basename "$SRC")
  fi

  [[ "$SRCTYPE" = "disk" ]] && SRC="$(readlink -f $SRC)"
  [[ "$SRCTYPE" = "libvirt" && -z "$LIBVIRTSRCURI" ]] && die "Please provide a libvirt uri"

  transformVM "$SRCTYPE" "$SRC" "$LIBVIRTSRCURI"
  createEntities
}

transformVM() {
  local SRCTYPE=$1
  local SRC="$2"
  local LIBVIRTSRCURI="$3"
  local WD="$(basename $SRC).d"

  echo "  Converting source: $SRC"
  mkdir -p $WD

  ls -shal $SRC

  local NAME=$(basename $SRC | sed "s/[^a-zA-Z0-9-]/-/g" | tr "[:upper:]" "[:lower:]")

  #
  # generate disk and domxml
  [[ "$LIBVIRTSRCURI" ]] && LIBVIRTSRCURI="-ic $LIBVIRTSRCURI"
  virt-v2v -i "$SRCTYPE" $LIBVIRTSRCURI "$SRC" -o local -on $NAME -oa sparse -of raw -os $WD --machine-readable

  local DOMXML=$(ls $WD/*.xml)
  local VMYAML=${DOMXML%.xml}.yaml

  #
  # Convert domxml to vm.yaml
  xsltproc $BASEDIR/data/toVMSpec.xsl $DOMXML | tee $VMYAML

  if [[ $(xmllint --xpath "count(//disk[@type='file']/source)" $DOMXML) -gt 1 ]];
  then
    die "Only one disk per VM is supported ATM"
  fi

  local DISKFILE=$(xmllint --xpath "string(//disk[@type='file']/source/@file)" $DOMXML)

  #
  # Copy to final destination
  cp -v $DISKFILE $DSTD/disk.raw
  cp -v $VMYAML $DSTD/vm.yaml

  ls -shal $DSTD
}

createEntities() {
  local VMYAML=$DSTD/vm.yaml
  local DISKFILE=$DSTD/disk.raw

  local PVCNAME=$(egrep "^\s+name:" <$VMYAML | tail -n1 | cut -d":" -f2 | sed "s/^\s\+//")

  #
  # Create the VM first, because it includes the PVC
  #
  kubectl create -f $VMYAML

  sleep "4.2s"

  #
  # Now populate the PV
  #
  tee receiver.yaml <<EOY
apiVersion: v1
kind: Pod
metadata:
  name: v2v-receiver-$PVCNAME
  labels:
    receiver-for: $PVCNAME
spec:
  restartPolicy: Never
  containers:
  - name: v2v
    image: quay.io/fabiand/v2v-pv-populator
    volumeMounts:
    - name: dst
      mountPath: /dst
  volumes:
  - name: dst
    persistentVolumeClaim:
      claimName: $PVCNAME
---
apiVersion: v1
kind: Service
metadata:
  labels:
    receiver-for: $PVCNAME
  name: v2v-receiver-$PVCNAME
spec:
  ports:
  - port: 54321
    protocol: TCP
    targetPort: 54321
  selector:
    receiver-for: $PVCNAME
  type: ClusterIP
EOY
  kubectl create -f receiver.yaml

  sleep "4.2s"

  # Wait for the pod to come up and try to send the image
  local N=30
  while [[ $N -gt 0 ]]; do
    echo "Trial $N to send data"
    nc v2v-receiver-$PVCNAME 54321 <$DISKFILE && break
    sleep 10
    N=$(( $N - 1 ))
  done
  [[ $N = 0 ]] && die "Failed to send data" || echo "Data transmitted!"
  kubectl delete -f receiver.yaml
}

main
